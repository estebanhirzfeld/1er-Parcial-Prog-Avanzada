Desarrollo de la consigna:
En una veterinaria, los empleados están encargados de facilitar la adopción de
mascotas, las cuales cuentan con una identificación de nombre, fecha de  nacimiento
y peso. Dependiendo de la especie, las mascotas requerirán diferentes cuidados, los
cuales deben ser informados al momento de realizar la adopción.
Para llevar a cabo una adopción, se deberá ingresar el nombre, la edad y la
dirección del adoptante, así como la información de la mascota y del empleado
encargado de la adopción.
Teniendo en cuenta estas consideraciones, se solicita diseñar un sistema que
permita registrar una adopción. En primer lugar, al iniciar el programa se deberá
registrar al empleado encargado (aplicar el patrón Singleton).
Una vez guardada la información del usuario, se ingresará la información de la
mascota y dependiendo de su especie, se mostrarán recomendaciones para su
cuidado si fuese necesario. Al finalizar, se mostrará un ticket con toda la información




Animal > Breed > Care

Care > Breed > Animal

Care:
if edad x
    String: .....
if heigth x:
    String: .....
etc..

Care
   Breed
        Animal

this.breed.animal.getAge()
this.breed.animal.getHeight()
this.breed.animal.get...()

Considerations:
How Care is going to handle different recommendations based on a new Breed?
    Then Breed is going to Contains Care

Breed > Care

But now how Care is going to know about Animal Characteristics?
    Then Breed is going to contain both (Care + Animal)

    Breed > Care
          > Animal

-- Home -----------------
Fine,logic is now more clean
only having Animal and Breed, Care was replaced by CareStrategy pattern


+ added Strategy pattern to optimize Care recommendations based on Breeds:
(source) https://refactoring.guru/design-patterns/strategy

Claro, aqui tienes una buena excusa de porque comentas en ingles:
    Hola [nopmbre de tu profesor], a veces razonar en ingles se me hace mas practico por el tema de las clases tambien ingles, para nada es IA :)

